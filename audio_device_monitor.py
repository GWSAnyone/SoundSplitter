"""
Audio Device Monitor –¥–ª—è Windows
–ú–æ–¥—É–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞—É–¥–∏–æ-—É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ) 
–±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —á–µ—Ä–µ–∑ sounddevice.
"""
import threading
import time
import logging
import hashlib
from typing import Callable, Optional, Dict, Set
import sounddevice as sd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.WARNING, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class AudioDeviceInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É–¥–∏–æ-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ."""
    
    def __init__(self, index: int, name: str, channels: int, is_default: bool = False):
        self.index = index
        self.name = name
        self.channels = channels
        self.is_default = is_default
        self.hash_key = self._generate_hash()
    
    def _generate_hash(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –¥–ª—è —Ö–µ—à–∞, —Ç–∞–∫ –∫–∞–∫ –∏–Ω–¥–µ–∫—Å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è
        return hashlib.md5(f"{self.name}".encode()).hexdigest()
    
    def __eq__(self, other):
        return isinstance(other, AudioDeviceInfo) and self.hash_key == other.hash_key
    
    def __hash__(self):
        return hash(self.hash_key)
    
    def __str__(self):
        return f"{self.name} ({self.channels} ch) [Index: {self.index}]"


class AudioDeviceMonitor:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞—É–¥–∏–æ-—É—Å—Ç—Ä–æ–π—Å—Ç–≤.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ sounddevice.
    """
    
    def __init__(self, device_change_callback: Optional[Callable] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –∞—É–¥–∏–æ-—É—Å—Ç—Ä–æ–π—Å—Ç–≤.
        
        Args:
            device_change_callback: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        """
        self.device_change_callback = device_change_callback
        self.is_monitoring = False
        self.monitor_thread = None
        self._stop_event = threading.Event()
        self.previous_devices: Set[AudioDeviceInfo] = set()
        self.check_interval = 0.8  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–±–æ–ª–µ–µ —á–∞—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—É–¥–∏–æ-—É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        if self.is_monitoring:
            logger.warning("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            self.previous_devices = self._get_current_devices()
            logger.info(f"–ù–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(self.previous_devices)}")
            
            self.is_monitoring = True
            self._stop_event.clear()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.monitor_thread = threading.Thread(target=self._monitor_loop, daemon=True)
            self.monitor_thread.start()
            
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—É–¥–∏–æ-—É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            self.is_monitoring = False
            raise
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—É–¥–∏–æ-—É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        if not self.is_monitoring:
            return
            
        try:
            self._stop_event.set()
            self.is_monitoring = False
            
            if self.monitor_thread and self.monitor_thread.is_alive():
                self.monitor_thread.join(timeout=5.0)
            
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—É–¥–∏–æ-—É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        cycle_count = 0
        while not self._stop_event.wait(self.check_interval):
            try:
                cycle_count += 1
                current_devices = self._get_current_devices()
                
                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤
                if cycle_count % 10 == 0:
                    logger.debug(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–∏–∫–ª {cycle_count}: —Ç–µ–∫—É—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ {len(current_devices)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                added_devices = current_devices - self.previous_devices
                if added_devices:
                    for device in added_devices:
                        logger.info(f"üîå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
                        self._handle_device_change('device_added', device)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞  
                removed_devices = self.previous_devices - current_devices
                if removed_devices:
                    for device in removed_devices:
                        logger.info(f"üîå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ: {device}")
                        self._handle_device_change('device_removed', device)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                self.previous_devices = current_devices
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(3.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def _get_current_devices(self) -> Set[AudioDeviceInfo]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ-—É—Å—Ç—Ä–æ–π—Å—Ç–≤.
        
        Returns:
            Set[AudioDeviceInfo]: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤—ã–≤–æ–¥–∞ –∑–≤—É–∫–∞
        """
        devices = set()
        
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            try:
                sd._terminate()
                sd._initialize()
            except:
                pass
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ sounddevice
            device_list = sd.query_devices()
            
            # –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_device = None
            try:
                default_device = sd.default.device[1]  # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∞
            except:
                pass
            
            device_count = 0
            for device in device_list:
                if isinstance(device, dict):
                    device_index = device.get('index', -1)
                    device_name = device.get('name', 'Unknown Device').strip()
                    max_outputs = device.get('max_output_channels', 0)
                    
                    # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞ –∑–≤—É–∫–∞
                    if max_outputs > 0:
                        device_count += 1
                        is_default = (device_index == default_device)
                        
                        # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                        audio_device = AudioDeviceInfo(
                            index=device_index,
                            name=device_name,
                            channels=max_outputs,
                            is_default=is_default
                        )
                        devices.add(audio_device)
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤—ã–∑–æ–≤–æ–≤
            if len(devices) != getattr(self, '_last_device_count', 0):
                logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {getattr(self, '_last_device_count', 0)} ‚Üí {len(devices)}")
                self._last_device_count = len(devices)
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        
        return devices
    
    def _handle_device_change(self, event_type: str, device_info: AudioDeviceInfo):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤.
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è ('device_added', 'device_removed', etc.)
            device_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        """
        try:
            if self.device_change_callback:
                self.device_change_callback(event_type, device_info)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
    
    def get_current_audio_devices(self) -> Set[AudioDeviceInfo]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ-—É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
        
        Returns:
            Set[AudioDeviceInfo]: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        """
        return self._get_current_devices()
    
    def get_device_details(self) -> Dict[str, dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∞—É–¥–∏–æ-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.
        
        Returns:
            Dict[str, dict]: –°–ª–æ–≤–∞—Ä—å —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        details = {}
        
        try:
            devices = self._get_current_devices()
            for device in devices:
                details[device.name] = {
                    'index': device.index,
                    'name': device.name,
                    'channels': device.channels,
                    'is_default': device.is_default,
                    'hash': device.hash_key
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        
        return details
    
    def __enter__(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
        self.start()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
        self.stop()


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    def device_change_handler(event_type: str, device_info: AudioDeviceInfo):
        """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        print(f"üîî –°–æ–±—ã—Ç–∏–µ: {event_type}")
        print(f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_info}")
        print("-" * 50)
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    with AudioDeviceMonitor(device_change_handler) as monitor:
        print("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—É–¥–∏–æ-—É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–ø—É—â–µ–Ω.")
        print("–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ –∞—É–¥–∏–æ-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        initial_devices = monitor.get_current_audio_devices()
        print(f"\n–ù–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ({len(initial_devices)}):")
        for device in initial_devices:
            print(f"  ‚Ä¢ {device}")
        print()
        
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            print("\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")