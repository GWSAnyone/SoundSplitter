import psutil
import asyncio
import os
import json
import flet as ft
import pygetwindow as gw
import ctypes
import threading
import time
import win32gui


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ hwnd
def get_process_name(hwnd):
    try:
        # –ü–æ–ª—É—á–∞–µ–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞ —á–µ—Ä–µ–∑ hwnd
        pid = ctypes.c_ulong()
        ctypes.windll.user32.GetWindowThreadProcessId(hwnd, ctypes.byref(pid))
        process = psutil.Process(pid.value)
        return process.name()
    except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
        return "Unknown"


class ApplicationAudioRouter:
    def __init__(self, target_devices_list, app_instance):
        self.target_devices_list = target_devices_list
        self.device_streams = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.device_settings = {}  # –î—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.devices = target_devices_list  # –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app = app_instance  # –≠–∫–∑–µ–º–ø–ª—è—Ä AudioForwarderApp
        self.applications = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        self._stop_event = threading.Event()
        self._monitoring_task = None
        self._dialog_open = False
        self._last_update_time = 0
        self._update_interval = 3.0  # –£–º–µ–Ω—å—à–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–æ 3 —Å–µ–∫—É–Ω–¥
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∑–≤—É–∫–∞
        self.source_device_name = None
        self.source_device_id = None
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        self.error_counts = {
            'monitoring': 0,
            'interface': 0,
            'devices': 0,
            'settings': 0
        }
        self.last_error_time = 0
        self.max_errors_per_category = 5
        self.error_reset_interval = 300  # 5 –º–∏–Ω—É—Ç
        
        self.load_settings()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞."""
        if os.path.exists('audio_router_settings.json'):
            try:
                with open('audio_router_settings.json', 'r', encoding='utf-8') as f:
                    self.device_settings = json.load(f)
            except (json.JSONDecodeError, FileNotFoundError):
                self.device_settings = {}

    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª."""
        try:
            with open('audio_router_settings.json', 'w', encoding='utf-8') as f:
                json.dump(self.device_settings, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def select_devices_for_app(self, app_name, selected_devices):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤—ã–≤–æ–¥–∞ –∑–≤—É–∫–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        self.device_settings[app_name] = selected_devices
        self.save_settings()

    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        print("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ApplicationAudioRouter...")
        self._stop_event.set()
        self._dialog_open = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        for device_name, streams in list(self.device_streams.items()):
            try:
                if streams and len(streams) > 1:
                    _, target_stream = streams
                    if hasattr(target_stream, 'active') and target_stream.active:
                        target_stream.stop()
                    if hasattr(target_stream, 'close'):
                        target_stream.close()
                    print(f"‚úÖ –ü–æ—Ç–æ–∫ –¥–ª—è {device_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞ {device_name}: {e}")
        
        self.device_streams.clear()
        self.applications.clear()
        print("‚úÖ ApplicationAudioRouter –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def update_applications(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ä–µ—Å—É—Ä—Å–æ–≤."""
        print("üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...")
        cycle_count = 0
        
        while not self._stop_event.wait(0.1):  # –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
                is_valid, error_msg = self._validate_state()
                if not is_valid:
                    print(f"‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {error_msg}")
                    break
                
                cycle_count += 1
                current_time = time.time()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
                if current_time - self._last_update_time < self._update_interval:
                    await asyncio.sleep(0.5)
                    continue
                
                self._last_update_time = current_time
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –æ—Ç–∫—Ä—ã—Ç
                if not self._dialog_open:
                    await asyncio.sleep(1.0)
                    continue
                
                current_apps = {}
                
                # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –æ–∫–Ω–∞
                try:
                    visible_windows = gw.getWindowsWithTitle('')
                    audio_relevant_processes = {
                        'chrome.exe', 'firefox.exe', 'msedge.exe', 'opera.exe',
                        'spotify.exe', 'vlc.exe', 'wmplayer.exe', 'winamp.exe',
                        'foobar2000.exe', 'aimp.exe', 'potplayer.exe', 'mpc-hc.exe',
                        'steam.exe', 'discord.exe', 'telegram.exe', 'zoom.exe',
                        'teams.exe', 'skype.exe', 'obs64.exe', 'streamlabs.exe'
                    }
                    
                    for win in visible_windows:
                        if (win.visible and win.title.strip() != '' and 
                            len(win.title) > 3 and win.title != 'Program Manager'):
                            
                            try:
                                hwnd = win._hWnd
                                app_name = get_process_name(hwnd)
                                
                                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ-—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                                if (app_name.lower() in audio_relevant_processes or
                                    win.title in self.device_settings or
                                    any(keyword in win.title.lower() for keyword in 
                                        ['–º—É–∑—ã–∫–∞', 'music', 'audio', '–∑–≤—É–∫', 'video', '–≤–∏–¥–µ–æ', 'player'])):
                                    
                                    current_apps[hwnd] = {
                                        "title": win.title,
                                        "app_name": app_name
                                    }
                            except Exception as e:
                                # –ú–µ–ª–∫–∏–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–∫–æ–Ω –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã
                                continue
                                
                except Exception as e:
                    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–∫–æ–Ω
                    self._handle_error('monitoring', e, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–∫–æ–Ω", show_user=False)
                    await asyncio.sleep(2.0)
                    continue

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if current_apps != self.applications:
                    self.applications = current_apps
                    print(f"üì± –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {len(current_apps)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 20 —Ü–∏–∫–ª–æ–≤
                if cycle_count % 20 == 0:
                    print(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: —Ü–∏–∫–ª {cycle_count}, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π {len(current_apps)}")
                
                await asyncio.sleep(1.0)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                
            except Exception as e:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                error_id = self._handle_error('monitoring', e, f"–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ #{cycle_count}", show_user=False)
                
                # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                if self.error_counts['monitoring'] > self.max_errors_per_category:
                    print(f"üö® –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫")
                    break
                
                await asyncio.sleep(3.0)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def show_interface(self, page: ft.Page):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π."""
        print("üñ•Ô∏è –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            is_valid, error_msg = self._validate_state()
            if not is_valid:
                self._handle_error('interface', Exception(error_msg), "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", show_user=True)
                return
            
            self._dialog_open = True
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
            app_list = ft.Column(
                scroll=ft.ScrollMode.AUTO,
                expand=True,
                spacing=10
            )
            
            # –£–õ–£–ß–®–ï–ù–ò–ï: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏ –ª—É—á—à–∏–π –¥–∏–∑–∞–π–Ω
            dialog = ft.AlertDialog(
                modal=True,
                title=ft.Text("üéµ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º", size=18, weight=ft.FontWeight.BOLD),
                content=ft.Container(
                    width=800,  # –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞
                    height=400,  # –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
                    padding=15,
                    content=ft.Column([
                        ft.Text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:", size=14),
                        ft.Divider(height=1),
                        ft.Container(
                            content=app_list,
                            expand=True
                        )
                    ])
                ),
                actions=[
                    ft.Row([
                        ft.ElevatedButton(
                            "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", 
                            on_click=lambda e: self.force_refresh_apps(app_list, page),
                            style=ft.ButtonStyle(shape=ft.RoundedRectangleBorder(radius=10))
                        ),
                        ft.ElevatedButton(
                            "‚ùå –ó–∞–∫—Ä—ã—Ç—å", 
                            on_click=lambda e: self.close_dialog(page, dialog),
                            style=ft.ButtonStyle(shape=ft.RoundedRectangleBorder(radius=10))
                        )
                    ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN)
                ],
                actions_alignment=ft.MainAxisAlignment.SPACE_BETWEEN
            )

            # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            await self.populate_app_list(app_list)

            if not page or not hasattr(page, 'overlay'):
                self._handle_error('interface', Exception("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞"), "–ü—Ä–æ–≤–µ—Ä–∫–∞ page", show_user=True)
                return

            page.overlay.append(dialog)
            dialog.open = True
            page.update()

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ
            last_apps_count = len(self.applications)
            update_counter = 0
            
            while dialog.open and not self._stop_event.is_set():
                try:
                    await asyncio.sleep(2.0)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    current_apps_count = len(self.applications)
                    if current_apps_count != last_apps_count or update_counter % 10 == 0:
                        await self.populate_app_list(app_list)
                        if page and hasattr(page, 'update'):
                            page.update()
                        last_apps_count = current_apps_count
                        print(f"üîÑ UI –æ–±–Ω–æ–≤–ª–µ–Ω: {current_apps_count} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
                    
                    update_counter += 1
                    
                except Exception as e:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    self._handle_error('interface', e, f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI #{update_counter}", show_user=False)
                    await asyncio.sleep(3.0)
            
            print("‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–∫—Ä—ã—Ç")
            
        except Exception as e:
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self._handle_error('interface', e, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", show_user=True)
        finally:
            self._dialog_open = False

    def force_refresh_apps(self, app_list, page):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π."""
        try:
            print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...")
            asyncio.create_task(self.populate_app_list(app_list))
            page.update()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

    async def populate_app_list(self, app_list):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        try:
            if not app_list or not hasattr(app_list, 'controls'):
                return
                
            # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            current_apps_count = len(self.applications)
            if hasattr(app_list, '_last_apps_count') and app_list._last_apps_count == current_apps_count:
                return  # –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º
            
            app_list.controls.clear()
            app_list._last_apps_count = current_apps_count
            
            if not self.applications:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
                app_list.controls.append(
                    ft.Container(
                        content=ft.Column([
                            ft.Icon("search_off", size=48, color="grey"),
                            ft.Text(
                                "–ê—É–¥–∏–æ–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", 
                                size=16, 
                                text_align=ft.TextAlign.CENTER,
                                color="grey"
                            ),
                            ft.Text(
                                "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª–∏, –±—Ä–∞—É–∑–µ—Ä—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∞—É–¥–∏–æ–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                                size=12,
                                text_align=ft.TextAlign.CENTER,
                                color="grey"
                            )
                        ], horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                        padding=20,
                        alignment=ft.alignment.center
                    )
                )
                return
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø—Ä–æ—Ü–µ—Å—Å–∞–º –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            apps_by_process = {}
            for hwnd, info in self.applications.items():
                process_name = info['app_name']
                if process_name not in apps_by_process:
                    apps_by_process[process_name] = []
                apps_by_process[process_name].append((hwnd, info))
            
            # –°–æ–∑–¥–∞–µ–º UI –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            for process_name, app_instances in apps_by_process.items():
                for hwnd, info in app_instances:
                    try:
                        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
                        if info['title'] not in self.device_settings or not isinstance(self.device_settings[info['title']], list):
                            self.device_settings[info['title']] = self.devices.copy()

                        selected_devices = self.device_settings.get(info['title'], [])
                        
                        # –£–õ–£–ß–®–ï–ù–ò–ï: –ë–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ —á–µ–∫–±–æ–∫—Å—ã
                        checkboxes = []
                        for device in self.devices:
                            try:
                                checkbox = ft.Checkbox(
                                    label=device,
                                    value=device in selected_devices,
                                    on_change=lambda e, app=info['title'], dev=device: self.update_device_selection(app, dev, e.control.value),
                                    scale=0.9  # –ù–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä
                                )
                                checkboxes.append(checkbox)
                            except Exception as e:
                                # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞
                                continue

                        # –£–õ–£–ß–®–ï–ù–ò–ï: –ë–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
                        checkboxes_container = ft.Container(
                            content=ft.Column(
                                controls=checkboxes,
                                scroll=ft.ScrollMode.AUTO,
                                spacing=5
                            ),
                            width=280,
                            height=min(120, len(checkboxes) * 35),  # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤—ã—Å–æ—Ç–∞
                            border=ft.border.all(1, "outline"),
                            border_radius=8,
                            padding=10,
                            bgcolor="surface_variant"
                        )

                        # –£–õ–£–ß–®–ï–ù–ò–ï: –ë–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤—ã–π –¥–∏–∑–∞–π–Ω —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                        app_row = ft.Container(
                            content=ft.Column([
                                ft.Row([
                                    ft.Container(
                                        content=ft.Column([
                                            ft.Text(
                                                f"üéµ {info['title']}", 
                                                size=14, 
                                                weight=ft.FontWeight.W_500,
                                                max_lines=2,
                                                overflow=ft.TextOverflow.ELLIPSIS
                                            ),
                                            ft.Text(
                                                f"–ü—Ä–æ—Ü–µ—Å—Å: {process_name}",
                                                size=11,
                                                color="outline"
                                            )
                                        ], spacing=2),
                                        expand=True
                                    ),
                                    checkboxes_container
                                ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
                                ft.Divider(height=1, color="outline")
                            ], spacing=10),
                            padding=ft.padding.symmetric(horizontal=10, vertical=8),
                            margin=ft.margin.symmetric(vertical=2),
                            border_radius=8,
                            bgcolor="surface",
                            border=ft.border.all(1, "outline")
                        )
                        
                        app_list.controls.append(app_row)
                        
                    except Exception as e:
                        # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è UI –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                        self._handle_error('interface', e, f"–°–æ–∑–¥–∞–Ω–∏–µ UI –¥–ª—è {info.get('title', 'Unknown')}", show_user=False)
                        continue
                        
        except Exception as e:
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
            self._handle_error('interface', e, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞", show_user=True)

    def close_dialog(self, page, dialog):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π —Ä–µ—Å—É—Ä—Å–æ–≤."""
        print("‚ùå –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        try:
            self._dialog_open = False
            dialog.open = False
            
            # –û—á–∏—Å—Ç–∫–∞ UI
            if hasattr(dialog, 'content') and hasattr(dialog.content, 'content'):
                if hasattr(dialog.content.content, 'controls'):
                    for control in dialog.content.content.controls:
                        if hasattr(control, 'content') and hasattr(control.content, 'controls'):
                            control.content.controls.clear()
            
            if page and hasattr(page, 'update'):
                page.update()
            print("‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")

    def update_device_selection(self, app_name, device, is_selected):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π."""
        try:
            selected_devices = self.device_settings.get(app_name, [])

            if isinstance(selected_devices, str):
                selected_devices = [selected_devices]

            if is_selected and device not in selected_devices:
                selected_devices.append(device)
                print(f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '{device}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è '{app_name}'")
                
            elif not is_selected and device in selected_devices:
                selected_devices.remove(device)
                print(f"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '{device}' —É–¥–∞–ª–µ–Ω–æ –¥–ª—è '{app_name}'")

            self.device_settings[app_name] = selected_devices
            self.save_settings()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            
            print(f"üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è '{app_name}': {selected_devices}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            if hasattr(self.app, 'on_routing_settings_changed'):
                self.app.on_routing_settings_changed(app_name, selected_devices)
            
        except Exception as e:
            self._handle_error('settings', e, f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è {app_name}", show_user=False)

    def get_active_devices_for_current_app(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
            active_hwnd = win32gui.GetForegroundWindow()
            
            for hwnd, info in self.applications.items():
                if hwnd == active_hwnd:
                    app_title = info['title']
                    return self.device_settings.get(app_title, self.devices.copy())
            
            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            return self.devices.copy()
            
        except Exception as e:
            self._handle_error('monitoring', e, "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", show_user=False)
            return self.devices.copy()

    def should_route_to_device(self, device_name, target_app_title=None):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–ª–∂–µ–Ω –ª–∏ –∑–≤—É–∫ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ."""
        try:
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            if not self.device_settings:
                return True
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            if target_app_title:
                app_devices = self.device_settings.get(target_app_title, self.devices.copy())
                return device_name in app_devices if isinstance(app_devices, list) else True
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            active_devices = self.get_active_devices_for_current_app()
            return device_name in active_devices if isinstance(active_devices, list) else True
            
        except Exception as e:
            self._handle_error('monitoring', e, f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è {device_name}", show_user=False)
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º

    def get_routing_statistics(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏."""
        try:
            total_apps = len(self.applications)
            configured_apps = len(self.device_settings)
            
            device_usage = {}
            for app_name, devices in self.device_settings.items():
                if isinstance(devices, list):
                    for device in devices:
                        device_usage[device] = device_usage.get(device, 0) + 1
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            most_used_device = None
            if device_usage:
                max_usage = max(device_usage.values())
                for device, usage in device_usage.items():
                    if usage == max_usage:
                        most_used_device = device
                        break
            
            return {
                'total_apps': total_apps,
                'configured_apps': configured_apps,
                'device_usage': device_usage,
                'most_used_device': most_used_device
            }
            
        except Exception as e:
            self._handle_error('monitoring', e, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏", show_user=False)
            return {}

    def export_settings(self, filepath=None):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª."""
        try:
            if not filepath:
                filepath = f'audio_routing_backup_{int(time.time())}.json'
            
            export_data = {
                'version': '1.0',
                'timestamp': time.time(),
                'source_device': self.source_device_name,
                'devices': self.devices,
                'routing_settings': self.device_settings,
                'statistics': self.get_routing_statistics()
            }
            
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, ensure_ascii=False, indent=2)
            
            print(f"üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {filepath}")
            return filepath
            
        except Exception as e:
            self._handle_error('settings', e, f"–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ {filepath}", show_user=True)
            return None

    def import_settings(self, filepath):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                import_data = json.load(f)
            
            if 'routing_settings' in import_data:
                self.device_settings.update(import_data['routing_settings'])
                self.save_settings()
                print(f"üì• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑: {filepath}")
                return True
            else:
                self._handle_error('settings', Exception("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞"), f"–ò–º–ø–æ—Ä—Ç –∏–∑ {filepath}", show_user=True)
                return False
                
        except Exception as e:
            self._handle_error('settings', e, f"–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ {filepath}", show_user=True)
            return False

    def reset_all_settings(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏."""
        try:
            self.device_settings.clear()
            self.save_settings()
            print("üîÑ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
            
            if hasattr(self.app, 'show_message'):
                self.app.show_message("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
                
        except Exception as e:
            self._handle_error('settings', e, "–°–±—Ä–æ—Å –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_user=True)

    async def start(self, page):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º."""
        print("üöÄ –ó–∞–ø—É—Å–∫ ApplicationAudioRouter...")
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            self._stop_event.clear()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –æ—à–∏–±–æ–∫
            monitoring_task = asyncio.create_task(self.update_applications())
            interface_task = asyncio.create_task(self.show_interface(page))
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä–æ–µ—Ç –¥–∏–∞–ª–æ–≥)
            await interface_task
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self._stop_event.set()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                await asyncio.wait_for(monitoring_task, timeout=5.0)
            except asyncio.TimeoutError:
                print("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
                monitoring_task.cancel()
            
            print("‚úÖ ApplicationAudioRouter –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞: {e}")
            self._stop_event.set()
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            self.stop_monitoring()

    def update_devices(self, new_devices):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(new_devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        
        # –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        for app_name, devices in list(self.device_settings.items()):
            if isinstance(devices, list):
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                valid_devices = [d for d in devices if d in new_devices]
                if valid_devices != devices:
                    self.device_settings[app_name] = valid_devices
                    print(f"üì± –û–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è {app_name}: {valid_devices}")
        
        self.devices = new_devices
        self.save_settings()
        print(f"‚úÖ –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–±–Ω–æ–≤–ª–µ–Ω: {self.devices}")

    def update_source_device(self, source_device_name):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–≤—É–∫–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏."""
        self.source_device_name = source_device_name
        if source_device_name and hasattr(self.app, 'get_device_id'):
            self.source_device_id = self.app.get_device_id(source_device_name)
            print(f"üé§ –ò—Å—Ç–æ—á–Ω–∏–∫ –∑–≤—É–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {source_device_name} (ID: {self.source_device_id})")
        else:
            self.source_device_id = None
            print(f"‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ –∑–≤—É–∫–∞ —Å–±—Ä–æ—à–µ–Ω")

    def get_device_settings_for_app(self, app_title):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        return self.device_settings.get(app_title, self.devices.copy())

    def is_device_enabled_for_app(self, app_title, device_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        app_devices = self.device_settings.get(app_title, self.devices.copy())
        return device_name in app_devices if isinstance(app_devices, list) else False

    def _handle_error(self, error_type: str, error: Exception, context: str = "", show_user: bool = False):
        """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏."""
        current_time = time.time()
        
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        if current_time - self.last_error_time > self.error_reset_interval:
            self.error_counts = {key: 0 for key in self.error_counts.keys()}
            print("üìä –°—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ —Å–±—Ä–æ—à–µ–Ω—ã")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        if error_type in self.error_counts:
            self.error_counts[error_type] += 1
        
        self.last_error_time = current_time
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_id = f"{error_type}_{current_time:.0f}"
        error_msg = f"[{error_type.upper()}] {str(error)}"
        
        if context:
            error_msg += f" | –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}"
        
        print(f"‚ùå {error_msg} (ID: {error_id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏
        is_critical = self.error_counts.get(error_type, 0) > self.max_errors_per_category
        
        if is_critical:
            print(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {error_type} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç ({self.max_errors_per_category})")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if hasattr(self.app, 'show_message'):
                self.app.show_message(
                    f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!\n\n"
                    f"–¢–∏–ø: {error_type}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {str(error)[:100]}...\n\n"
                    f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
                )
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            self._emergency_stop()
            
        elif show_user and hasattr(self.app, 'show_message'):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            self.app.show_message(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n\n"
                f"{str(error)}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"
            )
        
        return error_id

    def _emergency_stop(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö."""
        print("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ ApplicationAudioRouter...")
        try:
            self._stop_event.set()
            self._dialog_open = False
            self.stop_monitoring()
            print("‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")

    def _is_error_critical(self, error: Exception) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏."""
        critical_errors = [
            'MemoryError',
            'SystemError', 
            'OSError',
            'PermissionError',
            'FileNotFoundError'
        ]
        return any(err in str(type(error).__name__) for err in critical_errors)

    def _validate_state(self) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å."""
        if not self.devices:
            return False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
        
        if not self.source_device_name:
            return False, "–ù–µ –≤—ã–±—Ä–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–≤—É–∫–∞"
        
        if self._stop_event.is_set():
            return False, "–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –æ—à–∏–±–æ–∫
        for error_type, count in self.error_counts.items():
            if count > self.max_errors_per_category:
                return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—à–∏–±–æ–∫ –¥–ª—è {error_type}"
        
        return True, "–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ"
