import flet as ft
import sounddevice as sd
import collections
import threading
import os
import json
import time
import numpy as np
# from application_audio_router import ApplicationAudioRouter  # –û—Ç–∫–ª—é—á–µ–Ω–æ
import asyncio
from audio_device_monitor import AudioDeviceMonitor


class SettingsManager:
    def __init__(self, filepath='device_settings.json'):
        self.filepath = filepath
        self.settings = {
            "device_settings": {},
            "dont_show_save_notification": False,
            "theme": "light"
        }

    def load(self):
        if os.path.exists(self.filepath):
            try:
                with open(self.filepath, 'r', encoding='utf-8') as f:
                    self.settings = json.load(f)
            except (json.JSONDecodeError, FileNotFoundError):
                pass
        return self.settings

    def save(self, settings=None):
        if settings is None:
            settings = self.settings
        try:
            with open(self.filepath, 'w', encoding='utf-8') as f:
                json.dump(settings, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")


class AudioForwarderApp:
    def __init__(self, page: ft.Page):
        self.page = page
        self.settings_manager = SettingsManager()
        self.settings = self.settings_manager.load()
        self.is_dark_mode = self.settings.get("theme", "light") == "dark"
        self.language = self.settings.get("language", 'ru')

        self.setup_page()
        self.initialize_state()
        self.setup_ui()
        self.load_settings()
        self.device_containers = {}
        self.update_devices()

        # self.audio_router = ApplicationAudioRouter(self.target_devices_list, self)  # –û—Ç–∫–ª—é—á–µ–Ω–æ
        self.source_device_name = None

        self.apply_theme()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        self.start_status_timer()



    def load_settings(self):
        loaded_settings = self.settings_manager.load()
        self.device_settings = loaded_settings.get("device_settings", {})
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.sample_rate = loaded_settings.get("sample_rate", 48000)
        self.blocksize = loaded_settings.get("blocksize", 256)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã
        if hasattr(self, 'sample_rate_dropdown'):
            self.sample_rate_dropdown.value = str(self.sample_rate)
        if hasattr(self, 'blocksize_dropdown'):
            self.blocksize_dropdown.value = str(self.blocksize)

    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        for device in self.target_devices_list:
            self.device_settings[device] = {
                'delay': self.delays.get(device, 0),
                'volume': self.volumes.get(device, 0)
            }

        self.settings_manager.settings["device_settings"] = self.device_settings
        self.settings_manager.save(self.settings_manager.settings)

    def start_status_timer(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞."""
        import threading
        self.status_timer = threading.Timer(1.0, self.update_status)
        self.status_timer.daemon = True
        self.status_timer.start()
    
    def _reset_statistics(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ç–æ–∫–æ–≤."""
        self.stream_stats = {
            'active_streams': 0,
            'total_frames': 0,
            'errors_count': 0,
            'start_time': None,
            'total_callbacks': 0,
            'data_processed_mb': 0.0,
            'last_callback_time': 0,
            'callback_intervals': collections.deque(maxlen=100)
        }
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ç–æ–∫–æ–≤ —Å–±—Ä–æ—à–µ–Ω–∞")

    def update_status(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å-–±–∞—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."""
        try:
            current_time = time.time()
            
            # DEBUG: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ
            if not hasattr(self, '_debug_counter'):
                self._debug_counter = 0
            self._debug_counter += 1
            
            if self._debug_counter % 10 == 0:  # –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ #{self._debug_counter}, –ø–æ—Ç–æ–∫–æ–≤: {len(self.device_streams)}")
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                self._force_device_update = True
                self.update_devices()
            
            # Throttling: –æ–±–Ω–æ–≤–ª—è–µ–º UI –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 100ms
            if current_time - self.last_ui_update < self.ui_update_throttle:
                self.pending_ui_updates = True
                return
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
            active_streams = 0
            debug_info = []
            
            for device_name, streams in self.device_streams.items():
                if streams:
                    input_stream, output_stream = streams
                    is_active = False
                    
                    # –°—á–∏—Ç–∞–µ–º –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º –µ—Å–ª–∏ output_stream —Ä–∞–±–æ—Ç–∞–µ—Ç
                    if output_stream and hasattr(output_stream, 'active') and output_stream.active:
                        active_streams += 1
                        is_active = True
                        debug_info.append(f"{device_name}: active=True")
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ—Ç–æ–∫–æ–≤
                    elif output_stream and not getattr(output_stream, 'closed', True):
                        active_streams += 1
                        is_active = True
                        debug_info.append(f"{device_name}: not_closed=True")
                    else:
                        debug_info.append(f"{device_name}: inactive")
                        
            # DEBUG: –≤—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–æ–∫–∞—Ö
            if self._debug_counter % 10 == 0 and debug_info:
                print(f"üìä –î–µ—Ç–∞–ª–∏ –ø–æ—Ç–æ–∫–æ–≤: {'; '.join(debug_info)}")
            
            self.streams_indicator.value = f"–ü–æ—Ç–æ–∫–∏: {active_streams}"
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–Ω—è—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏  
            if self.stream_stats['start_time'] and self.stream_stats['total_callbacks'] > 0:
                elapsed = current_time - self.stream_stats['start_time']
                
                # Callback'–∏ –≤ —Å–µ–∫—É–Ω–¥—É (—Ä–µ–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏)
                callbacks_per_sec = self.stream_stats['total_callbacks'] / elapsed if elapsed > 0 else 0
                
                # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ú–ë/—Å–µ–∫
                data_rate_mb = self.stream_stats['data_processed_mb'] / elapsed if elapsed > 0 else 0
                
                # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (—Ä–∞–∑–±—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–µ–∂–¥—É callback'–∞–º–∏)
                stability = "–°—Ç–∞–±–∏–ª—å–Ω–æ"
                if len(self.stream_stats['callback_intervals']) > 10:
                    intervals = list(self.stream_stats['callback_intervals'])
                    avg_interval = sum(intervals) / len(intervals)
                    max_deviation = max(abs(i - avg_interval) for i in intervals)
                    if max_deviation > avg_interval * 0.5:  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 50%
                        stability = "–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ"
                
                self.performance_indicator.value = f"{callbacks_per_sec:.0f} call/s | {data_rate_mb:.1f} MB/s | {stability}"
                
                # DEBUG: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ callback'–æ–≤
                if self._debug_counter % 10 == 0:
                    print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.stream_stats['total_callbacks']} callback'–æ–≤ –∑–∞ {elapsed:.1f}—Å")
            else:
                self.performance_indicator.value = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è..."
                # DEBUG: –ø–æ—á–µ–º—É –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if self._debug_counter % 10 == 0:
                    print(f"‚ö†Ô∏è –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: start_time={self.stream_stats['start_time']}, callbacks={self.stream_stats['total_callbacks']}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º
            errors = self.stream_stats['errors_count']
            total_calls = max(1, self.stream_stats['total_callbacks'])
            error_rate = (errors / total_calls) * 100
            
            self.error_indicator.value = f"–û—à–∏–±–∫–∏: {errors} ({error_rate:.1f}%)"
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
            is_transmitting = (self.transmission_thread and self.transmission_thread.is_alive() and 
                             active_streams > 0)
            
            if is_transmitting:
                self.status_text.value = f"‚ñ∂Ô∏è –¢—Ä–∞–Ω—Å–ª–∏—Ä—É—é –Ω–∞ {active_streams} —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
            elif self.transmission_thread and self.transmission_thread.is_alive():
                self.status_text.value = "‚ö†Ô∏è –ü–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω, –Ω–æ –Ω–µ—Ç —Ü–µ–ª–µ–π"
            else:
                self.status_text.value = "‚è∏Ô∏è –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if hasattr(self, 'page') and (self.pending_ui_updates or current_time - self.last_ui_update > 1.0):
                self.page.update()
                self.last_ui_update = current_time
                self.pending_ui_updates = False
                
                # DEBUG: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                if self._debug_counter % 10 == 0:
                    print(f"üñ•Ô∏è UI –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if not self.stop_event.is_set():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
            self.status_timer = threading.Timer(0.5, self.update_status)
            self.status_timer.daemon = True
            self.status_timer.start()

    def setup_page(self):
        """Initial page setup."""
        self.page.title = "üéµ Audio Forwarder"
        self.page.window.on_event = self.window_event_handler
        self.page.window.prevent_close = True
        self.page.scroll = ft.ScrollMode.AUTO
        self.page.window.width = 1000
        self.page.window.height = 890
        self.page.window.min_width = 450
        self.page.window.min_height = 890

    def initialize_state(self):
        """Initialize state variables."""
        self.transmission_thread = None
        self.stop_event = threading.Event()
        self.target_devices_list = []
        self.delays = {}
        self.buffers = {}
        self.device_streams = {}
        self.volumes = {}
        self.device_settings = {}
        
        # –ê—É–¥–∏–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        self.sample_rate = 48000  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        self.blocksize = 256      # –ù–∏–∑–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        self.bit_depth = 'float32'
        
        # –ö–µ—à –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.devices_cache = {}
        self.devices_cache_time = 0
        self.cache_timeout = 5.0  # –û–±–Ω–æ–≤–ª—è—Ç—å –∫–µ—à –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        self._force_device_update = False  # –§–ª–∞–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ç–æ–∫–æ–≤ (—É–ª—É—á—à–µ–Ω–Ω–∞—è)
        self.stream_stats = {
            'active_streams': 0,
            'total_frames': 0,
            'errors_count': 0,
            'start_time': None,
            'total_callbacks': 0,
            'data_processed_mb': 0.0,
            'last_callback_time': 0,
            'callback_intervals': collections.deque(maxlen=100)  # –î–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        }
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.ui_update_throttle = 0.1  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –¥–æ 10 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
        self.last_ui_update = 0
        self.pending_ui_updates = False
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é
        self.memory_cleanup_counter = 0
        self.memory_cleanup_interval = 1000  # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 1000 callback –≤—ã–∑–æ–≤–æ–≤
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.recovery_attempts = 0
        self.max_recovery_attempts = 3
        self.last_error_time = 0
        self.error_recovery_delay = 5.0  # —Å–µ–∫—É–Ω–¥
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –∞—É–¥–∏–æ-–ø–µ—Ç–µ–ª—å (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤)
        self.loop_protection_enabled = True
        self.loop_detection_buffer = collections.deque([0.0], maxlen=100)  # –ë—É—Ñ–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ç–µ–ª—å (float –∑–Ω–∞—á–µ–Ω–∏—è)
        self.loop_detection_threshold = 0.95  # –ü–æ—Ä–æ–≥ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ç–ª–∏
        self.loop_prevention_enabled = True
        self.problematic_devices = set()  # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.loop_protection_stats = {
            'loops_detected': 0,
            'loops_prevented': 0,
            'false_positives': 0,
            'last_loop_time': 0
        }
        
        # –û—Ç–ª–∞–¥–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 1000 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        self.delay_debug_mode = False  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å True –µ—Å–ª–∏ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤—Å–µ –µ—â–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
        self._delay_debug_printed = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    def setup_ui(self):
        """Set up the user interface."""
        # Source and target device selection with full width
        self.source_combo = ft.Dropdown(
            label="–ò—Å—Ç–æ—á–Ω–∏–∫ –∑–≤—É–∫–∞", 
            options=[],
            expand=True,
            border_radius=10,
            on_change=self.on_source_device_change
        )
        self.target_combo = ft.Dropdown(
            label="–¶–µ–ª–µ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", 
            options=[],
            expand=True,
            border_radius=10
        )

        # Buttons with consistent styling that adapts to theme
        self.language_toggle_button = ft.ElevatedButton(
            text="–†—É—Å" if self.language == 'ru' else "Eng",
            on_click=self.toggle_language,
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=10)
            )
        )

        self.advanced_settings_button = ft.ElevatedButton(
            text="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            on_click=lambda _: self.on_advanced_settings_click(),
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=10)
            )
        )

        self.theme_toggle_button = ft.ElevatedButton(
            text="–î–µ–Ω—å" if not self.is_dark_mode else "–ù–æ—á—å",
            on_click=self.toggle_theme,
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=10)
            )
        )

        self.theme_lang_buttons = ft.Row(
            [self.theme_toggle_button, self.language_toggle_button],
            spacing=10
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤—É–∫–∞
        self.sample_rate_dropdown = ft.Dropdown(
            label="Sample Rate",
            options=[
                ft.dropdown.Option("44100", "44.1 kHz (CD –∫–∞—á–µ—Å—Ç–≤–æ)"),
                ft.dropdown.Option("48000", "48 kHz (—Å—Ç—É–¥–∏–π–Ω–æ–µ)"),
                ft.dropdown.Option("96000", "96 kHz (Hi-Res)"),
                ft.dropdown.Option("192000", "192 kHz (Max)")
            ],
            value=str(self.sample_rate),
            width=200,
            on_change=self.on_sample_rate_change,
            tooltip="–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞"
        )

        self.blocksize_dropdown = ft.Dropdown(
            label="Buffer Size",
            options=[
                ft.dropdown.Option("64", "64 (–º–∏–Ω. –∑–∞–¥–µ—Ä–∂–∫–∞)"),
                ft.dropdown.Option("128", "128 (–Ω–∏–∑–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)"),
                ft.dropdown.Option("256", "256 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"),
                ft.dropdown.Option("512", "512 (—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å)"),
                ft.dropdown.Option("1024", "1024 (–º–∞–∫—Å. —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å)")
            ],
            value=str(self.blocksize),
            width=200,
            on_change=self.on_blocksize_change,
            tooltip="–†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: –º–µ–Ω—å—à–µ = –º–µ–Ω—å—à–µ –∑–∞–¥–µ—Ä–∂–∫–∞, –±–æ–ª—å—à–µ = —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ"
        )

        self.audio_settings_row = ft.Row(
            [self.sample_rate_dropdown, self.blocksize_dropdown],
            spacing=10
        )

        # –°—Ç–∞—Ç—É—Å-–±–∞—Ä
        self.status_text = ft.Text(
            "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            size=12,
            weight=ft.FontWeight.BOLD
        )
        
        self.streams_indicator = ft.Text(
            "–ü–æ—Ç–æ–∫–∏: 0",
            size=12
        )
        
        self.performance_indicator = ft.Text(
            "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: --",
            size=12
        )
        
        self.error_indicator = ft.Text(
            "–û—à–∏–±–∫–∏: 0",
            size=12
        )
        
        self.status_bar = ft.Container(
            content=ft.Row([
                self.status_text,
                ft.VerticalDivider(width=1, color="gray"),
                self.streams_indicator,
                ft.VerticalDivider(width=1, color="gray"),
                self.performance_indicator,
                ft.VerticalDivider(width=1, color="gray"),
                self.error_indicator
            ], spacing=15),
            bgcolor="surface",
            border=ft.border.all(1, "gray"),
            border_radius=5,
            padding=10,
            margin=5
        )

        # Control buttons with consistent styling
        self.restart_button = ft.ElevatedButton(
            text="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å",
            on_click=lambda _: self.restart_capture(),
            disabled=True,
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=10)
            )
        )
        
        self.start_button = ft.ElevatedButton(
            text="–ó–∞–ø—É—Å—Ç–∏—Ç—å",
            on_click=lambda _: self.start_capture(),
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=10)
            )
        )
        
        self.stop_button = ft.ElevatedButton(
            text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
            on_click=lambda _: self.stop_capture(),
            disabled=True,
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=10)
            )
        )

        self.Start_Stop_button = ft.Row(
            [self.start_button, self.stop_button, self.restart_button],
            alignment=ft.MainAxisAlignment.START,
            spacing=10
        )

        self.Start_Stop_Voice_buttons = ft.Row(
            [self.Start_Stop_button, self.advanced_settings_button],
            alignment=ft.MainAxisAlignment.SPACE_BETWEEN
        )

        # Add and other control buttons with consistent styling
        self.add_button = ft.ElevatedButton(
            text="–î–æ–±–∞–≤–∏—Ç—å",
            on_click=lambda _: self.add_device(self.target_combo.value),
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=10)
            )
        )

        # Device control buttons with consistent styling
        self.refresh_devices_button = ft.ElevatedButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
            on_click=lambda _: self.force_refresh_devices(),
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=10)
            ),
            tooltip="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ-—É—Å—Ç—Ä–æ–π—Å—Ç–≤\n(–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö)"
        )

        self.diagnose_devices_button = ft.ElevatedButton(
            text="üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
            on_click=lambda _: self.diagnose_audio_devices(),
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=10)
            ),
            tooltip="–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ –∞—É–¥–∏–æ-–ø–µ—Ç–µ–ª—å"
        )

        self.device_control_buttons = ft.Row(
            [self.add_button, self.refresh_devices_button, self.diagnose_devices_button],
            spacing=10
        )

        self.add_theme_buttons = ft.Row(
            [self.device_control_buttons, self.theme_lang_buttons],
            alignment=ft.MainAxisAlignment.SPACE_BETWEEN
        )
        
        self.clear_button = ft.ElevatedButton(
            text="–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫",
            on_click=lambda _: self.clear_devices(),
            visible=False,
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=10)
            )
        )

        # Selected devices list with scrollable panel
        self.selected_devices_list = ft.Row(
            wrap=True, spacing=10, run_spacing=10, expand=False
        )
        
        self.devices_panel = ft.Container(
            content=self.selected_devices_list,
            border=ft.border.all(2, "blue"),
            padding=15, margin=15,
            border_radius=15,
            visible=False,
            bgcolor="surface"
        )

        # Add elements to the page
        self.page.add(
            ft.Container(
                content=ft.Column([
                    ft.Text(
                        "üéµ Audio Forwarder", 
                        size=28, 
                        weight=ft.FontWeight.BOLD,
                        text_align=ft.TextAlign.CENTER
                    ),
                    ft.Divider(height=20, thickness=2),
                    self.source_combo,
                    self.target_combo,
                    ft.Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤—É–∫–∞:", weight=ft.FontWeight.BOLD),
                    self.audio_settings_row,
                    self.add_theme_buttons,
                    self.Start_Stop_Voice_buttons,
                    self.devices_panel,
                    self.clear_button,
                    self.status_bar,
                ], spacing=15),
                padding=20
            )
        )

    def apply_theme(self):
        """Apply the current theme to the page."""
        if self.is_dark_mode:
            self.page.theme_mode = ft.ThemeMode.DARK
            self.theme_toggle_button.text = self.get_translation("–ù–æ—á—å")
        else:
            self.page.theme_mode = ft.ThemeMode.LIGHT
            self.theme_toggle_button.text = self.get_translation("–î–µ–Ω—å")

        self.update_texts()
        self.page.update()

    def toggle_theme(self, _):
        """Toggle between dark and light themes."""
        self.is_dark_mode = not self.is_dark_mode
        self.settings["theme"] = "dark" if self.is_dark_mode else "light"
        self.settings_manager.save(self.settings)
        self.apply_theme()

    def on_sample_rate_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏."""
        if self.transmission_thread and self.transmission_thread.is_alive():
            self.show_message("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ")
            e.control.value = str(self.sample_rate)  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            self.page.update()
            return
        
        self.sample_rate = int(e.control.value)
        self.settings["sample_rate"] = self.sample_rate
        self.settings_manager.save(self.settings)
        print(f"üéµ Sample rate –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {self.sample_rate} Hz")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        self._reset_statistics()
        self._delay_debug_printed.clear()
        self.delay_debug_mode = False

    def on_blocksize_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –±—É—Ñ–µ—Ä–∞."""
        if self.transmission_thread and self.transmission_thread.is_alive():
            self.show_message("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ")
            e.control.value = str(self.blocksize)  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            self.page.update()
            return
        
        self.blocksize = int(e.control.value)
        self.settings["blocksize"] = self.blocksize
        self.settings_manager.save(self.settings)
        print(f"üîß Buffer size –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {self.blocksize} frames")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        self._reset_statistics()
        self._delay_debug_printed.clear()
        self.delay_debug_mode = False

    def on_source_device_change(self, e):
        """Handle source device change"""
        if e.control.value:
            print(f"üé§ –ò—Å—Ç–æ—á–Ω–∏–∫ –∑–≤—É–∫–∞ –∏–∑–º–µ–Ω–µ–Ω: {e.control.value}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ ApplicationAudioRouter
            # if hasattr(self, 'audio_router') and self.audio_router:
            #     self.audio_router.update_source_device(e.control.value)  # –û—Ç–∫–ª—é—á–µ–Ω–æ
            
            self.save_settings()
            
            # –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–æ–≤—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
            if self.transmission_thread and self.transmission_thread.is_alive():
                self.show_message("‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –∑–≤—É–∫–∞ –∏–∑–º–µ–Ω–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏...")
                self.restart_capture()
            else:
                pass

    def on_routing_settings_changed(self, app_name, selected_devices):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏."""
        print(f"üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –¥–ª—è {app_name}: {selected_devices}")
        
        # –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        if self.transmission_thread and self.transmission_thread.is_alive():
            print("üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
            # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º callback'–µ
            
    def should_route_to_device(self, device_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–ª–∂–µ–Ω –ª–∏ –∑–≤—É–∫ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ."""
        # if not hasattr(self, 'audio_router') or not self.audio_router:
        return True  # –ï—Å–ª–∏ –Ω–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–æ—Ç–∫–ª—é—á–µ–Ω–æ)
        
        # return self.audio_router.should_route_to_device(device_name)  # –û—Ç–∫–ª—é—á–µ–Ω–æ

    def force_refresh_devices(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —á–µ—Ä–µ–∑ AudioDeviceMonitor."""
        print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
        is_streaming = (self.transmission_thread and 
                       self.transmission_thread.is_alive() and 
                       len(self.device_streams) > 0)
        
        if is_streaming:
            self.show_message("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!\n\n"
                            "–°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –∞—É–¥–∏–æ, "
                            "–∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.")
            print("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ - –∞–∫—Ç–∏–≤–Ω—ã –ø–æ—Ç–æ–∫–∏")
            return
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AudioDeviceMonitor –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            device_monitor = AudioDeviceMonitor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            current_devices = device_monitor.get_current_audio_devices()
            device_details = device_monitor.get_device_details()
            
            print(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(current_devices)} –∞—É–¥–∏–æ-—É—Å—Ç—Ä–æ–π—Å—Ç–≤:")
            for device in current_devices:
                print(f"  ‚Ä¢ {device}")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            self._force_device_update = True
            self.devices_cache.clear()
            self.devices_cache_time = 0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ UI
            self.update_devices()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–æ—Ç–ª–æ–∂–µ–Ω–Ω–æ)
            message = f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
            message += f"–ù–∞–π–¥–µ–Ω–æ {len(current_devices)} –∞—É–¥–∏–æ-—É—Å—Ç—Ä–æ–π—Å—Ç–≤.\n"
            message += f"–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω."
            
            print("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            print(f"üìù {message}")
            
            # –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –ø–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ UI
            import threading
            def delayed_message():
                import time
                time.sleep(0.5)  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π UI
                self.show_message(message)
            
            threading.Thread(target=delayed_message, daemon=True).start()
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}"
            print(error_msg)
            
            # –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –ø–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
            import threading
            def delayed_error():
                import time
                time.sleep(0.5)
                self.show_message(error_msg)
            
            threading.Thread(target=delayed_error, daemon=True).start()

    def diagnose_audio_devices(self):
        """
        –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—É–¥–∏–æ-—É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ –∞—É–¥–∏–æ-–ø–µ—Ç–µ–ª—å.
        –û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∫–∞–∫ Tronsmart Element T6.
        """
        print("\n" + "="*70)
        print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–£–î–ò–û-–£–°–¢–†–û–ô–°–¢–í")
        print("="*70)
        
        try:
            devices = sd.query_devices()
            host_apis = sd.query_hostapis()
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å host API –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            host_api_names = {}
            for i, api in enumerate(host_apis):
                try:
                    host_api_names[i] = api.get('name', 'Unknown') if hasattr(api, 'get') else str(api) # type: ignore
                except:
                    host_api_names[i] = 'Unknown'
            
            print(f"\nüìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(devices)} –∞—É–¥–∏–æ-—É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            print(f"üåê –î–æ—Å—Ç—É–ø–Ω–æ {len(host_apis)} –∞—É–¥–∏–æ-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            problematic_devices = []
            bluetooth_devices = []
            loop_risk_devices = []
            
            for device in devices:
                try:
                    name = device.get('name', 'Unknown') if hasattr(device, 'get') else str(device) # type: ignore
                    device_id = device.get('index', -1) if hasattr(device, 'get') else -1 # type: ignore
                    max_input = device.get('max_input_channels', 0) if hasattr(device, 'get') else 0 # type: ignore
                    max_output = device.get('max_output_channels', 0) if hasattr(device, 'get') else 0 # type: ignore
                    hostapi_id = device.get('hostapi', -1) if hasattr(device, 'get') else -1 # type: ignore
                    default_samplerate = device.get('default_samplerate', 0) if hasattr(device, 'get') else 0 # type: ignore
                    
                    host_api_name = host_api_names.get(hostapi_id, 'Unknown')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ Tronsmart Element T6 –∏–ª–∏ –ø–æ—Ö–æ–∂–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    is_tronsmart = 'tronsmart' in name.lower() or 'element' in name.lower() or 't6' in name.lower()
                    is_bluetooth = any(keyword in name.lower() for keyword in ['bluetooth', 'bt', 'wireless', 'headphones', 'speakers'])
                    
                    # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                    print(f"\nüîç –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ #{device_id}: {name}")
                    print(f"  üì° API: {host_api_name}")
                    print(f"  üé§ –í—Ö–æ–¥: {max_input} –∫–∞–Ω–∞–ª–æ–≤")
                    print(f"  üîä –í—ã—Ö–æ–¥: {max_output} –∫–∞–Ω–∞–ª–æ–≤")
                    print(f"  ‚ö° –ß–∞—Å—Ç–æ—Ç–∞: {default_samplerate} Hz")
                    
                    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –≤—Ö–æ–¥–æ–º –ò –≤—ã—Ö–æ–¥–æ–º
                    if max_input > 0 and max_output > 0:
                        print(f"  ‚ö†Ô∏è  –†–ò–°–ö –ê–£–î–ò–û-–ü–ï–¢–õ–ò: —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ò –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∑–≤—É–∫!")
                        loop_risk_devices.append(name)
                        
                        # –û—Å–æ–±–µ–Ω–Ω–æ –æ–ø–∞—Å–Ω–æ –¥–ª—è Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                        if is_bluetooth:
                            print(f"  üö® BLUETOOTH + –î–í–£–ù–ê–ü–†–ê–í–õ–ï–ù–ù–û–°–¢–¨ = –í–´–°–û–ö–ò–ô –†–ò–°–ö –ü–ï–¢–õ–ò!")
                            problematic_devices.append(name)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Tronsmart Element T6
                    if is_tronsmart:
                        print(f"  üéØ –ù–ê–ô–î–ï–ù TRONSMART ELEMENT T6!")
                        bluetooth_devices.append(name)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                        try:
                            sd.check_output_settings(device=device_id, samplerate=44100, channels=2)
                            print(f"  ‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞")
                        except Exception as e:
                            print(f"  ‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ù–ï –¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
                            problematic_devices.append(name)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                    if is_bluetooth and max_input > 0:
                        print(f"  üî¥ BLUETOOTH –° –ú–ò–ö–†–û–§–û–ù–û–ú: –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ç–ª–∏!")
                        problematic_devices.append(name)
                        
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
                    continue
            
            # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            print(f"\n" + "="*70)
            print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
            print("="*70)
            
            if problematic_devices:
                print(f"\nüö® –ü–†–û–ë–õ–ï–ú–ù–´–ï –£–°–¢–†–û–ô–°–¢–í–ê ({len(problematic_devices)}):")
                for device in problematic_devices:
                    print(f"  ‚Ä¢ {device}")
                print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
                print(f"  1. –û—Ç–∫–ª—é—á–∏—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–∞ —ç—Ç–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö")
                print(f"  2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–∞–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –í–´–í–û–î–ê")
                print(f"  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Bluetooth –ø—Ä–æ—Ñ–∏–ª–µ–π")
                print(f"  4. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ A2DP –ø—Ä–æ—Ñ–∏–ª—è")
            
            if loop_risk_devices:
                print(f"\n‚ö†Ô∏è  –†–ò–°–ö –ê–£–î–ò–û-–ü–ï–¢–ï–õ–¨ ({len(loop_risk_devices)}):")
                for device in loop_risk_devices:
                    print(f"  ‚Ä¢ {device}")
            
            if bluetooth_devices:
                print(f"\nüì± BLUETOOTH –£–°–¢–†–û–ô–°–¢–í–ê ({len(bluetooth_devices)}):")
                for device in bluetooth_devices:
                    print(f"  ‚Ä¢ {device}")
            
            print(f"\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û TRONSMART ELEMENT T6:")
            print(f"  1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ A2DP –ø—Ä–æ—Ñ–∏–ª—å")
            print(f"  2. –û—Ç–∫–ª—é—á–∏—Ç–µ HFP/HSP –ø—Ä–æ—Ñ–∏–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Bluetooth")
            print(f"  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω")
            print(f"  4. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ Bluetooth –¥—Ä–∞–π–≤–µ—Ä")
            
            print(f"\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print("="*70)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ UI
            result_message = f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            if problematic_devices:
                result_message += f"üö® –ù–∞–π–¥–µ–Ω–æ {len(problematic_devices)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:\n"
                for device in problematic_devices[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    result_message += f"‚Ä¢ {device}\n"
                if len(problematic_devices) > 3:
                    result_message += f"... –∏ –µ—â–µ {len(problematic_devices) - 3}\n"
                result_message += f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –æ—Ç–∫–ª—é—á–∏—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–∞ —ç—Ç–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö"
            else:
                result_message += f"‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            self.show_message(result_message)
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}"
            print(error_msg)
            self.show_message(error_msg)

    def _detect_audio_loop(self, indata, device_name: str) -> bool:
        """
        –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞—É–¥–∏–æ-–ø–µ—Ç–ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
        –û—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∫–∞–∫ Tronsmart Element T6.
        """
        try:
            if not self.loop_protection_enabled:
                return False
            
            # –í—ã—á–∏—Å–ª—è–µ–º RMS (—Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Ä–æ–≤–Ω—è —Å–∏–≥–Ω–∞–ª–∞
            rms = float(np.sqrt(np.mean(indata**2)))
            self.loop_detection_buffer.append(rms)
            
            # –ù—É–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            if len(self.loop_detection_buffer) < 50:
                return False
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            signal_levels = list(self.loop_detection_buffer)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç —É—Ä–æ–≤–Ω—è —Å–∏–≥–Ω–∞–ª–∞ (–ø—Ä–∏–∑–Ω–∞–∫ –ø–µ—Ç–ª–∏)
            if len(signal_levels) >= 10:
                recent_levels = signal_levels[-10:]
                early_levels = signal_levels[-20:-10] if len(signal_levels) >= 20 else signal_levels[:-10]
                
                if len(early_levels) > 0:
                    recent_avg = np.mean(recent_levels)
                    early_avg = np.mean(early_levels)
                    
                    # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ —Ä–µ–∑–∫–æ –≤–æ–∑—Ä–æ—Å
                    if recent_avg > early_avg * 2.0 and recent_avg > 0.1:
                        print(f"‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –ü–ï–¢–õ–Ø: {device_name}")
                        print(f"   –£—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞: {early_avg:.4f} ‚Üí {recent_avg:.4f} (x{recent_avg/early_avg:.2f})")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω
                        if self._check_repeating_pattern(signal_levels):
                            print(f"üö® –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê –ê–£–î–ò–û-–ü–ï–¢–õ–Ø: {device_name}")
                            self.loop_protection_stats['loops_detected'] += 1
                            self.loop_protection_stats['last_loop_time'] = int(time.time())
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö
                            self.problematic_devices.add(device_name)
                            
                            return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ç–ª–∏: {e}")
            return False

    def _check_repeating_pattern(self, signal_levels) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤ —Å–∏–≥–Ω–∞–ª–µ."""
        try:
            if len(signal_levels) < 20:
                return False
            
            # –ò—â–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏ —Å–∏–≥–Ω–∞–ª–∞
            half_size = len(signal_levels) // 2
            first_half = signal_levels[:half_size]
            second_half = signal_levels[half_size:half_size*2]
            
            if len(first_half) == len(second_half):
                correlation = np.corrcoef(first_half, second_half)[0, 1]
                if not np.isnan(correlation) and correlation > self.loop_detection_threshold:
                    print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {correlation:.3f})")
                    return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {e}")
            return False

    def _prevent_audio_loop(self, device_name: str) -> bool:
        """
        –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∞—É–¥–∏–æ-–ø–µ—Ç–ª—é –ø—É—Ç–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
        """
        try:
            if not self.loop_prevention_enabled:
                return False
            
            print(f"üõ°Ô∏è  –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–ï –ü–ï–¢–õ–ò: –æ—Ç–∫–ª—é—á–∞—é {device_name}")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            if device_name in self.device_streams:
                input_stream, output_stream = self.device_streams[device_name]
                
                if output_stream:
                    try:
                        output_stream.stop()
                        output_stream.close()
                        print(f"‚úÖ –ü–æ—Ç–æ–∫ {device_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞: {e}")
                
                # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                if device_name in self.buffers:
                    self.buffers[device_name].clear()
                    print(f"üßπ –ë—É—Ñ–µ—Ä {device_name} –æ—á–∏—â–µ–Ω")
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
                del self.device_streams[device_name]
                
                self.loop_protection_stats['loops_prevented'] += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                self.show_message(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞—É–¥–∏–æ-–ø–µ—Ç–ª—è!\n\n"
                                f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '{device_name}' –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ç–ª–∏.\n\n"
                                f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Bluetooth –ø—Ä–æ—Ñ–∏–ª–µ–π\n"
                                f"‚Ä¢ –û—Ç–∫–ª—é—á–∏—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ\n"
                                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ A2DP –ø—Ä–æ—Ñ–∏–ª—å")
                
                return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ç–ª–∏: {e}")
            return False

    def _check_device_availability(self, device_id: int, device_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            test_stream = sd.OutputStream(
                device=device_id,
                samplerate=44100,
                channels=2,
                blocksize=256,
                dtype='float32'
            )
            test_stream.start()
            test_stream.stop()
            test_stream.close()
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '{device_name}' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
            return False

    def update_devices(self):
        """Update available audio devices with caching optimization."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            current_time = time.time()
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            force_update = getattr(self, '_force_device_update', False)
            
            if (current_time - self.devices_cache_time) < self.cache_timeout and self.devices_cache and not force_update:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                filtered_sources = self.devices_cache.get('sources', [])
                filtered_targets = self.devices_cache.get('targets', [])
                print(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {len(filtered_sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, {len(filtered_targets)} —Ü–µ–ª–µ–π")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
                devices = sd.query_devices()
                filtered_sources = []
                filtered_targets = []
                seen_devices = set()

                # –ö–µ—à–∏—Ä—É–µ–º host APIs –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                host_apis_cache = {}
                try:
                    host_apis = sd.query_hostapis()
                    for i, api in enumerate(host_apis):
                        try:
                            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ API
                            if hasattr(api, 'get'):
                                host_apis_cache[i] = api.get('name', 'Unknown') # type: ignore
                            elif isinstance(api, dict):
                                host_apis_cache[i] = api['name'] if 'name' in api else 'Unknown'
                            else:
                                host_apis_cache[i] = str(api)
                        except Exception:
                            host_apis_cache[i] = 'Unknown'
                except Exception:
                    pass

                for device in devices:
                    try:
                        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                        name = device.get('name', 'Unknown Device') # type: ignore
                        device_id = device.get('index', -1) # type: ignore
                        hostapi_id = device.get('hostapi', -1) # type: ignore
                        max_output = device.get('max_output_channels', 0) # type: ignore
                        max_input = device.get('max_input_channels', 0) # type: ignore

                        # –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ host API –∏–∑ –∫–µ—à–∞
                        host_api = host_apis_cache.get(hostapi_id, 'Unknown')

                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å API MME
                        if host_api == "MME":
                            if max_output > 0 and max_input == 0:
                                # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                                excluded_devices = [
                                    "Mapper", 
                                    "–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤—ã—Ö —É—Å—Ç—Ä",
                                    "Sound Mapper",
                                    "Primary Sound Driver",
                                    "–û—Å–Ω–æ–≤–Ω–æ–π –∑–≤—É–∫–æ–≤–æ–π –¥—Ä–∞–π–≤–µ—Ä"
                                ]
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º
                                is_excluded = any(excluded in str(name) for excluded in excluded_devices)
                                
                                if is_excluded:
                                    print(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {name}")
                                elif device_id not in seen_devices:
                                    if "Line 1 (Virtual Audio Cable)" in str(name):
                                        filtered_sources.append(str(name))
                                        print(f"üì• –î–æ–±–∞–≤–ª–µ–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: {name}")
                                    else:
                                        filtered_targets.append(str(name))
                                        print(f"üì§ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ü–µ–ª—å: {name}")
                                    seen_devices.add(device_id)

                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
                        continue

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
                self.devices_cache = {
                    'sources': filtered_sources,
                    'targets': filtered_targets
                }
                self.devices_cache_time = current_time
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                self._force_device_update = False
                print(f"üîÑ –ö–µ—à —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–±–Ω–æ–≤–ª–µ–Ω: {len(filtered_sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, {len(filtered_targets)} —Ü–µ–ª–µ–π")
                print(f"üìã –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {filtered_sources}")
                print(f"üéØ –¶–µ–ª–∏: {filtered_targets}")

            # –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            self._schedule_ui_update(filtered_sources, filtered_targets)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Å–ø–∏—Å–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            if hasattr(self, 'devices_cache') and self.devices_cache:
                self._schedule_ui_update(
                    self.devices_cache.get('sources', []),
                    self.devices_cache.get('targets', [])
                )

    def _schedule_ui_update(self, sources, targets):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        def update_ui():
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                current_sources = []
                current_targets = []
                
                if self.source_combo.options:
                    current_sources = [opt.key if hasattr(opt, 'key') else opt.text for opt in self.source_combo.options]
                if self.target_combo.options:
                    current_targets = [opt.key if hasattr(opt, 'key') else opt.text for opt in self.target_combo.options]
                
                if current_sources != sources or current_targets != targets:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –±–µ–∑ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
                    old_source_value = self.source_combo.value
                    old_target_value = self.target_combo.value
                    
                    self.source_combo.options = [ft.dropdown.Option(device) for device in sources]
                    self.target_combo.options = [ft.dropdown.Option(device) for device in targets]
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –¥–æ—Å—Ç—É–ø–Ω—ã
                    if old_source_value in sources:
                        self.source_combo.value = old_source_value
                    if old_target_value in targets:
                        self.target_combo.value = old_target_value
                    
                    self.page.update()
                    print(f"‚úÖ UI –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {len(sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, {len(targets)} —Ü–µ–ª–µ–π")
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        import threading
        ui_thread = threading.Thread(target=update_ui)
        ui_thread.daemon = True
        ui_thread.start()

    def start_stream(self, device_name, source_device_id, sample_rate, blocksize):
        """Starts an output stream for a specific device."""
        target_device_id = self.get_device_id(device_name)
        if target_device_id is None:
            self.show_message(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '{device_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return None

        try:
            target_stream = sd.OutputStream(
                device=target_device_id, 
                samplerate=sample_rate, 
                channels=2,
                blocksize=blocksize,
                dtype=self.bit_depth,
                latency='low'  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            )
            target_stream.start()
            self.buffers[device_name] = collections.deque(maxlen=sample_rate // blocksize * 3)  # 3 —Å–µ–∫—É–Ω–¥—ã –±—É—Ñ–µ—Ä–∞
            return target_stream
        except Exception as e:
            self.show_message(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞ –¥–ª—è {device_name}: {e}")
            return None

    @staticmethod
    def get_device_id(device_name):
        """Returns the device ID for a given device name."""
        try:
            devices = sd.query_devices()
            for sd_device in devices:
                name = sd_device.get('name', '')  # type: ignore
                if str(name) == device_name:
                    return sd_device.get('index', None)  # type: ignore
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
        return None

    def stop_streams(self):
        """Stops all active streams."""
        for device, streams in self.device_streams.items():
            input_stream, target_stream = streams
            try:
                if input_stream:
                    input_stream.stop()
                if target_stream:
                    target_stream.stop()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞: {e}")
        self.device_streams.clear()

    def manage_capture(self, action="start"):
        if action == "start":
            if self.transmission_thread and self.transmission_thread.is_alive():
                self.show_message("–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è —É–∂–µ –∏–¥–µ—Ç.")
                return
            source_device = self.source_combo.value
            if not source_device or not self.target_devices_list:
                self.show_message("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∏ –∏—Å—Ç–æ—á–Ω–∏–∫, –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ü–µ–ª–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.")
                return
            self.restart_button.disabled = False
            self.transmission_thread = threading.Thread(target=self.manage_audio_stream,
                                                        args=(source_device, self.target_devices_list))
            self.transmission_thread.start()
        elif action == "stop":
            self.stop_event.set()
            if self.transmission_thread:
                self.transmission_thread.join()
            self.stop_streams()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            self._reset_statistics()
            
            self.start_button.disabled = False
            self.stop_button.disabled = True
            self.restart_button.disabled = True
            self.toggle_device_controls(active=True)
            self.page.update()

    def start_capture(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if not self.source_combo.value:
            self.show_message("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–≤—É–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–µ–ª–µ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        if not self.target_devices_list:
            self.show_message("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ü–µ–ª–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        source_device_id = self.get_device_id(self.source_combo.value)
        if source_device_id is None:
            self.show_message("‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ –∑–≤—É–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ü–µ–ª–µ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        unavailable_devices = []
        for device in self.target_devices_list:
            if self.get_device_id(device) is None:
                unavailable_devices.append(device)
        
        if unavailable_devices:
            self.show_message(f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {', '.join(unavailable_devices)}")
            return
        
        print(f"‚úÖ –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é: {self.source_combo.value} ‚Üí {len(self.target_devices_list)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        self.manage_capture(action="start")

    def restart_capture(self):
        self.stop_capture()
        time.sleep(1.5)
        self.start_capture()

    def stop_capture(self):
        self.manage_capture(action="stop")

    def adjust_value(self, device, control, delta, min_value, max_value, type="delay"):
        """Adjusts the delay or volume value within specified bounds."""
        if isinstance(control.value, str):
            current_value = int(control.value.strip()) if control.value.strip() else 0
        else:
            current_value = control.value

        new_value = max(min_value, min(max_value, current_value + delta))
        control.value = str(new_value)

        if type == "delay":
            self.update_delay(device, new_value)
        elif type == "volume":
            self.update_volume(device, new_value)

        slider_control = self.get_slider_control(device, type)
        if slider_control:
            slider_control.value = new_value

        self.page.update()
        return new_value

    def increment_delay(self, device, delay_input, delay_slider):
        self.adjust_value(device, delay_input, 10, 0, 3000, type="delay")

    def decrement_delay(self, device, delay_input, delay_slider):
        self.adjust_value(device, delay_input, -10, 0, 3000, type="delay")

    def increment_volume(self, device, volume_input, volume_slider):
        self.adjust_value(device, volume_input, 1, -10, 10, type="volume")

    def decrement_volume(self, device, volume_input, volume_slider):
        self.adjust_value(device, volume_input, -1, -10, 10, type="volume")

    def get_slider_control(self, device, type="delay"):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ —Ç–∏–ø–∞."""
        if device in self.device_containers:
            if type == "delay":
                return self.device_containers[device].get("delay_slider")
            elif type == "volume":
                return self.device_containers[device].get("volume_slider")
        return None

    def update_value(self, device, input_control, slider_control=None, value_type="delay"):
        """Updates delay or volume based on the input control with validation."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if isinstance(input_control, int):
                new_value = input_control
            else:
                if input_control.value.strip() == "":
                    input_control.value = "0"
                    new_value = 0
                else:
                    new_value = float(input_control.value)

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
            if value_type == "delay":
                new_value = int(new_value)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
                if new_value < 0:
                    self.show_message("‚ùå –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
                    new_value = 0
                elif new_value > 10000:
                    self.show_message("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 10000 –º—Å")
                    new_value = 10000
                
                self.delays[device] = new_value
                if not isinstance(input_control, int):
                    input_control.value = str(new_value)
                print(f"‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è {device}: {new_value} –º—Å")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏
            elif value_type == "volume":
                if new_value < -20:
                    self.show_message("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å: -20 –¥–ë")
                    new_value = -20
                elif new_value > 20:
                    self.show_message("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å: +20 –¥–ë")
                    new_value = 20
                
                self.volumes[device] = new_value
                if not isinstance(input_control, int):
                    input_control.value = str(new_value)
                print(f"‚úÖ –ì—Ä–æ–º–∫–æ—Å—Ç—å –¥–ª—è {device}: {new_value:+.1f} –¥–ë")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–∑—É–Ω–æ–∫
            if slider_control:
                slider_control.value = new_value

            self.page.update()
            self.save_settings()
            
        except ValueError:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if value_type == "delay":
                old_value = self.delays.get(device, 0)
                self.show_message("‚ùå –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (0-10000)")
            else:
                old_value = self.volumes.get(device, 0)
                self.show_message("‚ùå –ì—Ä–æ–º–∫–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (-20 –¥–æ +20)")
            
            if not isinstance(input_control, int):
                input_control.value = str(old_value)
            self.page.update()
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            self.show_message(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è: {e}")

    def update_delay(self, device, delay_input, delay_slider=None):
        self.update_value(device, delay_input, delay_slider, value_type="delay")

    def update_delay_from_slider(self, device, delay_slider, delay_input=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –ø–æ–ª–∑—É–Ω–∫–∞."""
        new_delay_ms = int(delay_slider.value)
        self.delays[device] = new_delay_ms
        if delay_input:
            delay_input.value = str(new_delay_ms)
        self.page.update()

    def update_volume(self, device, volume_input, volume_slider=None):
        self.update_value(device, volume_input, volume_slider, value_type="volume")

    def update_volume_from_slider(self, device, volume_slider, volume_input=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥—Ä–æ–º–∫–æ—Å—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –ø–æ–ª–∑—É–Ω–∫–∞."""
        new_volume_db = int(volume_slider.value)
        self.volumes[device] = new_volume_db
        if volume_input:
            volume_input.value = str(new_volume_db)
        self.page.update()

    def manage_audio_stream(self, source_device_name, target_devices=None, new_device=None, sample_rate=None,
                            blocksize=None):
        """Manages the audio stream."""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–ª–∞—Å—Å–∞ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if sample_rate is None:
                sample_rate = self.sample_rate
            if blocksize is None:
                blocksize = self.blocksize
                
            source_device_id = self.get_device_id(source_device_name)
            if source_device_id is None:
                self.show_message(f"–ò—Å—Ç–æ—á–Ω–∏–∫ '{source_device_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            if target_devices is None:
                target_devices = []

            if new_device:
                target_devices = [new_device]
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            self.stream_stats['start_time'] = time.time()
            self.stream_stats['total_frames'] = 0
            self.stream_stats['errors_count'] = 0
            self.stream_stats['total_callbacks'] = 0
            self.stream_stats['data_processed_mb'] = 0.0
            self.stream_stats['last_callback_time'] = 0
            self.stream_stats['callback_intervals'].clear()
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞, –∑–∞–ø—É—Å–∫ –¥–ª—è {len(target_devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")

            target_streams = []
            for target_device_name in target_devices:
                target_stream = self.start_stream(target_device_name, source_device_id, sample_rate, blocksize)
                if target_stream:
                    if new_device:
                        self.device_streams[target_device_name] = (None, target_stream)
                    target_streams.append((target_stream, target_device_name))

            def callback(indata, frames, time, status):
                """–£–ª—É—á—à–µ–Ω–Ω–∞—è callback —Ñ—É–Ω–∫—Ü–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ç–µ–ª—å."""
                import time as time_module
                current_callback_time = time_module.time()
                
                if status:
                    print(f"üîä –°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏: {status}")
                    self.stream_stats['errors_count'] += 1
                
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞—É–¥–∏–æ-–ø–µ—Ç–µ–ª—å –¥–ª—è Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞—É–¥–∏–æ-–ø–µ—Ç–ª–∏ (–æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è Tronsmart Element T6)
                    if self._detect_audio_loop(indata, source_device_name):
                        print(f"üö® –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ê–£–î–ò–û-–ü–ï–¢–õ–Ø: {source_device_name}")
                        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ç–ª–∏
                        return
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ç–ª–∏: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–µ—Ç–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                self.stream_stats['total_frames'] += frames
                self.stream_stats['total_callbacks'] += 1
                
                # –ò–∑–º–µ—Ä—è–µ–º –æ–±—ä–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (frames √ó –∫–∞–Ω–∞–ª—ã √ó –±–∞–π—Ç—ã –Ω–∞ sample)
                data_size_bytes = frames * 2 * 4  # 2 –∫–∞–Ω–∞–ª–∞ √ó 4 –±–∞–π—Ç–∞ (float32)
                self.stream_stats['data_processed_mb'] += data_size_bytes / (1024 * 1024)
                
                # –ò–∑–º–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–µ–∂–¥—É callback'–∞–º–∏
                if self.stream_stats['last_callback_time'] > 0:
                    interval = current_callback_time - self.stream_stats['last_callback_time']
                    self.stream_stats['callback_intervals'].append(interval)
                self.stream_stats['last_callback_time'] = current_callback_time
                
                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é - –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
                self.memory_cleanup_counter += 1
                if self.memory_cleanup_counter >= self.memory_cleanup_interval:
                    try:
                        # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –±—É—Ñ–µ—Ä—ã
                        for device_name in list(self.buffers.keys()):
                            buffer = self.buffers.get(device_name)
                            if buffer and len(buffer) > 1000:  # –ï—Å–ª–∏ –±—É—Ñ–µ—Ä —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
                                buffer.clear()
                        self.memory_cleanup_counter = 0
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏ –≤ callback: {e}")
                
                # –ê–Ω—Ç–∏–∞–ª–∏–∞—Å–∏–Ω–≥ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
                if sample_rate > 48000:
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç
                    filtered_data = indata.copy()
                    if len(filtered_data) > 1:
                        filtered_data[1:] = filtered_data[1:] * 0.9 + filtered_data[:-1] * 0.1
                else:
                    filtered_data = indata.copy()
                
                streams = target_streams if not new_device else [(self.device_streams[new_device][1], new_device)]
                for target_stream, target_device_name in streams:
                    try:
                        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–≤—É–∫–∞
                        if not self.should_route_to_device(target_device_name):
                            # –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–æ—Ç–æ–∫
                            continue
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                        delay_ms = self.delays.get(target_device_name, 0)
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã (–æ–±—ã—á–Ω–æ –º—Å ‚Üí —Å–µ–∫)
                        delay_s = delay_ms / 1000.0
                        
                        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê: –µ—Å–ª–∏ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ
                        if self.delay_debug_mode:
                            delay_s = delay_s / 1000.0  # –ï—â–µ —Ä–∞–∑ –¥–µ–ª–∏–º –Ω–∞ 1000
                            print(f"üêõ DEBUG: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ –¥–ª—è {target_device_name}: {delay_ms}–º—Å ‚Üí {delay_s}—Å")
                        
                        volume_db = self.volumes.get(target_device_name, 0)
                        volume_factor = 10 ** (volume_db / 20.0)

                        buffer = self.buffers[target_device_name]
                        
                        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
                        required_frames = int(sample_rate * delay_s)
                        required_chunks = max(1, required_frames // blocksize)  # –ü–æ—Ä—Ü–∏–∏, –Ω–µ —Ñ—Ä–µ–π–º—ã!
                        
                        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º callback –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
                        if target_device_name not in self._delay_debug_printed:
                            real_delay_ms = (required_chunks * blocksize / sample_rate) * 1000
                            print(f"üìä {target_device_name}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {delay_ms}–º—Å ‚Üí {required_chunks} –ø–æ—Ä—Ü–∏–π ‚Üí —Ä–µ–∞–ª—å–Ω–æ {real_delay_ms:.1f}–º—Å")
                            
                            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ debug —Ä–µ–∂–∏–º–∞ –µ—Å–ª–∏ –∑–∞–¥–µ—Ä–∂–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è
                            if delay_ms > 0 and real_delay_ms > delay_ms * 10:  # –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–∞—è –≤ 10 —Ä–∞–∑ –±–æ–ª—å—à–µ
                                print(f"‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ 10 —Ä–∞–∑ –±–æ–ª—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–π!")
                                print(f"üí° –í–∫–ª—é—á–∞—é debug —Ä–µ–∂–∏–º —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ 1000...")
                                self.delay_debug_mode = True
                                
                            self._delay_debug_printed.add(target_device_name)
                        
                        # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞
                        if len(buffer) > required_chunks * 3:  # –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –≤ 3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –Ω—É–∂–Ω–æ–≥–æ
                            buffer.clear()
                            print(f"üßπ –ë—É—Ñ–µ—Ä {target_device_name} –æ—á–∏—â–µ–Ω (–ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ)")

                        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å —Å –º—è–≥–∫–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
                        modified_audio = filtered_data * volume_factor
                        
                        # –ú—è–≥–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–ª–∏–ø–ø–∏–Ω–≥–∞
                        if volume_factor > 1.0:
                            modified_audio = np.tanh(modified_audio * 0.9) * 1.1
                        
                        buffer.append(modified_audio)

                        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                        while len(buffer) > required_chunks:
                            out_data = buffer.popleft()
                            target_stream.write(out_data)
                            
                    except Exception as e:
                        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {target_device_name}: {e}")
                        self.stream_stats['errors_count'] += 1
                        continue

            if not new_device:
                with sd.InputStream(device=source_device_id, channels=2, callback=callback,
                                    samplerate=sample_rate, blocksize=blocksize):
                    self.stop_event.clear()
                    self.start_button.disabled = True
                    self.stop_button.disabled = False
                    self.page.update()
                    while not self.stop_event.is_set():
                        sd.sleep(100)
            else:
                new_stream = sd.InputStream(device=source_device_id, channels=2, callback=callback,
                                            samplerate=sample_rate, blocksize=blocksize)
                new_stream.start()
                self.device_streams[new_device] = (new_stream, self.device_streams[new_device][1])
                self.page.update()

        except Exception as e:
            self.show_message(f"–û—à–∏–±–∫–∞ –≤ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–µ: {e}")
        finally:
            if not new_device:
                self.stop_streams()
                self.page.update()

    def add_device(self, device):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–æ–∫."""
        source_device = self.source_combo.value

        if not source_device:
            self.show_message("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–≤—É–∫–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.")
            return

        if device and device not in self.target_devices_list:
            self.target_devices_list.append(device)
            self.add_device_to_ui(device)

            if self.transmission_thread and self.transmission_thread.is_alive():
                self.manage_audio_stream(source_device, new_device=device)

    def add_device_to_ui(self, device):
        """Add the device UI elements for the newly added device."""
        device_settings = self.device_settings.get(device, {})
        delay_ms = device_settings.get('delay', 0)
        volume_db = device_settings.get('volume', 0)

        self.delays[device] = delay_ms
        self.volumes[device] = volume_db
        self.buffers[device] = collections.deque()

        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        divider = ft.Divider(height=10, thickness=2, color="gray")
        
        delay_slider = ft.Slider(
            value=delay_ms,
            min=0,
            max=3000,
            divisions=100,
            label="{value} –º—Å",
            on_change=lambda e, d=device: self.update_delay_from_slider(d, e.control, delay_input),
            expand=True
        )

        delay_input = ft.TextField(
            label="–ó–∞–¥–µ—Ä–∂–∫–∞ (–º—Å)",
            value=str(delay_ms),
            width=125,
            text_align=ft.TextAlign.CENTER,
            on_change=lambda e, d=device: self.update_delay(d, e.control, delay_slider),
            on_focus=lambda e: self.clear_default_value(e),
            on_blur=lambda e: self.restore_default_value(e),
            border_radius=10
        )

        volume_slider = ft.Slider(
            value=volume_db,
            min=-10,
            max=10,
            divisions=20,
            label="{value} –¥–ë",
            on_change=lambda e, d=device: self.update_volume_from_slider(d, e.control, volume_input),
            expand=True
        )

        volume_input = ft.TextField(
            label="–ì—Ä–æ–º–∫–æ—Å—Ç—å (–¥–ë)",
            value=str(volume_db),
            width=125,
            text_align=ft.TextAlign.CENTER,
            on_change=lambda e, d=device: self.update_volume(d, e.control, volume_slider),
            on_focus=lambda e: self.clear_default_value(e),
            on_blur=lambda e: self.restore_default_value(e),
            border_radius=10
        )

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        increment_volume_button = ft.IconButton(
            icon="add", 
            on_click=lambda e, d=device: self.increment_volume(d, volume_input, volume_slider),
            tooltip="–£–≤–µ–ª–∏—á–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å"
        )
        decrement_volume_button = ft.IconButton(
            icon="remove", 
            on_click=lambda e, d=device: self.decrement_volume(d, volume_input, volume_slider),
            tooltip="–£–º–µ–Ω—å—à–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å"
        )

        increment_button = ft.IconButton(
            icon="add", 
            on_click=lambda e, d=device: self.increment_delay(d, delay_input, delay_slider),
            tooltip="–£–≤–µ–ª–∏—á–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É"
        )
        decrement_button = ft.IconButton(
            icon="remove", 
            on_click=lambda e, d=device: self.decrement_delay(d, delay_input, delay_slider),
            tooltip="–£–º–µ–Ω—å—à–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É"
        )

        remove_button = ft.IconButton(
            icon="delete", 
            on_click=lambda e, d=device: self.remove_device(d),
            tooltip="–£–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        device_container = ft.Container(
            content=ft.Column(
                [
                    ft.Row([
                        ft.Text(f"üîä {device}", size=16, weight=ft.FontWeight.BOLD),
                        remove_button
                    ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
                    ft.Row([
                        decrement_button,
                        delay_input,
                        increment_button
                    ], alignment=ft.MainAxisAlignment.CENTER),
                    delay_slider,
                    divider,
                    ft.Row([
                        decrement_volume_button,
                        volume_input,
                        increment_volume_button
                    ], alignment=ft.MainAxisAlignment.CENTER),
                    volume_slider,
                ],
                alignment=ft.MainAxisAlignment.CENTER,
                spacing=10
            ),
            border=ft.border.all(2, "blue"),
            border_radius=15,
            padding=15,
            margin=5,
            width=350,
            bgcolor="surface",
            shadow=ft.BoxShadow(
                spread_radius=1,
                blur_radius=5,
                color="black12",
                offset=ft.Offset(0, 2)
            )
        )
        
        self.selected_devices_list.controls.append(device_container)
        
        self.device_containers[device] = {
            "delay_slider": delay_slider,
            "volume_slider": volume_slider,
            "container": device_container
        }
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        try:
            if hasattr(self, 'page') and self.page:
                self.page.update()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –≤ add_device_to_ui: {e}")
        
        self.update_panel_visibility()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º audio_router —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        # if hasattr(self, 'audio_router') and self.audio_router:
        #     self.audio_router.update_devices(self.target_devices_list)  # –û—Ç–∫–ª—é—á–µ–Ω–æ

    def remove_device(self, device):
        """Removes a device from the list and stops its stream."""
        if self.transmission_thread and self.transmission_thread.is_alive():
            self.show_message_with_stop_button("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫–∞ –≤–∫–ª—é—á–µ–Ω –ø–æ—Ç–æ–∫.")
            return

        if device in self.device_streams:
            _, target_stream = self.device_streams[device]
            try:
                target_stream.stop()
            except:
                pass
            del self.device_streams[device]

        if device in self.target_devices_list:
            index = self.target_devices_list.index(device)
            self.target_devices_list.pop(index)
            self.selected_devices_list.controls.pop(index)

            self.device_settings[device] = {
                'delay': self.delays.get(device, 0),
                'volume': self.volumes.get(device, 0)
            }

            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            for key in ['delays', 'volumes', 'buffers', 'device_containers']:
                device_dict = getattr(self, key, {})
                if device in device_dict:
                    del device_dict[device]

            self.update_panel_visibility()
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
            try:
                if hasattr(self, 'page') and self.page:
                    self.page.update()
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –≤ remove_device: {e}")

    def update_panel_visibility(self):
        """Updates the visibility of the devices panel and the clear button."""
        try:
            has_devices = len(self.target_devices_list) > 0
            
            if hasattr(self, 'devices_panel'):
                self.devices_panel.visible = has_devices
            if hasattr(self, 'clear_button'):
                self.clear_button.visible = has_devices
                
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            if hasattr(self, 'page') and self.page:
                try:
                    self.page.update()
                except Exception as update_error:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –≤ update_panel_visibility: {update_error}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ update_panel_visibility: {e}")

    def toggle_device_controls(self, active: bool):
        """Toggles the activity of the remove buttons and the clear button."""
        try:
            if hasattr(self, 'clear_button'):
                self.clear_button.disabled = not active
                
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
            if hasattr(self, 'page') and self.page:
                try:
                    self.page.update()
                except Exception as update_error:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –≤ toggle_device_controls: {update_error}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤: {e}")

    def clear_default_value(self, event):
        """Clears the default value of a text field if it is zero."""
        try:
            if event.control.value == "0":
                event.control.value = ""
                if hasattr(self, 'page') and self.page:
                    self.page.update()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ clear_default_value: {e}")

    def restore_default_value(self, event):
        """Restores the default value of a text field if it is empty."""
        try:
            if event.control.value.strip() == "":
                event.control.value = "0"
                if hasattr(self, 'page') and self.page:
                    self.page.update()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ restore_default_value: {e}")

    def window_event_handler(self, e):
        """Handles window events, like closing the app."""
        if e.data == "close":
            self.close_event()

    def close_event(self):
        """Handles the application close event, ensuring a clean shutdown."""
        self.save_settings()
        self.stop_event.set()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        if hasattr(self, 'status_timer'):
            try:
                self.status_timer.cancel()
                print("üîï –¢–∞–π–º–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞: {e}")
        

        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –ø–∞–º—è—Ç–∏
        self._cleanup_memory()
        
        if self.transmission_thread and self.transmission_thread.is_alive():
            self.show_message("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            time.sleep(0.5)
            self.transmission_thread.join()
        else:
            self.show_message("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            time.sleep(0.5)

        self.page.window.destroy()
        print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    def _cleanup_memory(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫."""
        try:
            # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
            for device in list(self.buffers.keys()):
                try:
                    self.buffers[device].clear()
                except Exception:
                    pass
            
            # –û—á–∏—â–∞–µ–º –∫–µ—à–∏
            if hasattr(self, 'devices_cache'):
                self.devices_cache.clear()
            
            # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤
            self.memory_cleanup_counter = 0
            self.stream_stats['total_frames'] = 0
            
            print("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")

    def _attempt_recovery(self, error_msg: str):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫."""
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –æ—à–∏–±–∫–∏
        if current_time - self.last_error_time < self.error_recovery_delay:
            self.recovery_attempts += 1
        else:
            self.recovery_attempts = 1
        
        self.last_error_time = current_time
        
        if self.recovery_attempts <= self.max_recovery_attempts:
            print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è #{self.recovery_attempts}: {error_msg}")
            
            try:
                # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
                for device in list(self.buffers.keys()):
                    if device in self.buffers:
                        self.buffers[device].clear()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                self.update_devices()
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫ –µ—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
                if self.recovery_attempts == 1:
                    self.stream_stats['errors_count'] = 0
                
                print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ #{self.recovery_attempts} —É—Å–ø–µ—à–Ω–æ")
                return True
                
            except Exception as e:
                print(f"‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ #{self.recovery_attempts} –Ω–µ—É–¥–∞—á–Ω–æ: {e}")
                return False
        else:
            print(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è ({self.max_recovery_attempts})")
            self.show_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {error_msg}. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
            return False

    def clear_devices(self):
        """Clears the list of devices."""
        if self.transmission_thread and self.transmission_thread.is_alive():
            self.show_message_with_stop_button("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫–∞ –≤–∫–ª—é—á–µ–Ω –ø–æ—Ç–æ–∫.")
            return

        self.stop_capture()
        self.target_devices_list.clear()
        self.selected_devices_list.controls.clear()
        self.buffers.clear()
        self.delays.clear()
        self.volumes.clear()
        self.device_containers.clear()
        self.update_panel_visibility()
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        try:
            if hasattr(self, 'page') and self.page:
                self.page.update()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –≤ clear_devices: {e}")

    def show_message(self, message: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ü–µ–Ω—Ç—Ä–µ –æ–∫–Ω–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ page –¥–æ—Å—Ç—É–ø–Ω–∞
            if not hasattr(self, 'page') or not self.page:
                print(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ (page –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞): {message}")
                return
                
            dialog = ft.AlertDialog(
                title=ft.Text(message),
                actions=[
                    ft.TextButton("OK", on_click=lambda e: self.close_dialog(dialog))
                ]
            )
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ overlay
            if hasattr(self.page, 'overlay'):
                self.page.overlay.append(dialog)
                dialog.open = True
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                try:
                    self.page.update()
                except Exception as update_error:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –≤ show_message: {update_error}")
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
            else:
                print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ (overlay –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω): {message}")
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ show_message: {e}")
            print(f"üìù –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")

    def close_dialog(self, dialog):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
        dialog.open = False
        self.page.update()

    def show_message_with_stop_button(self, message: str):
        """Shows a message dialog with the stop button."""
        dialog = ft.AlertDialog(
            title=ft.Text(message),
            actions=[
                ft.ElevatedButton(
                    text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                    on_click=lambda e: self.stop_stream_and_close_dialog(e, dialog),
                    style=ft.ButtonStyle(
                        shape=ft.RoundedRectangleBorder(radius=10)
                    )
                ),
            ],
            actions_alignment=ft.MainAxisAlignment.CENTER,
        )
        self.page.overlay.append(dialog)
        dialog.open = True
        self.page.update()

    def stop_stream_and_close_dialog(self, e, dialog):
        """Stops the stream and closes the dialog."""
        self.stop_capture()
        dialog.open = False
        self.page.update()

    def on_advanced_settings_click(self):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        print("üîß –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        
        #"""–û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–æ–≤."""
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º
        #try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
            #if self.transmission_thread and self.transmission_thread.is_alive():
               # active_streams = len([s for s in self.device_streams.values() if s])
                #if active_streams > 0:
                    #self.show_message(
                        #"‚ö†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!\n\n"
                        #f"–ê–∫—Ç–∏–≤–Ω–æ {active_streams} –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–æ–≤.\n"
                        #"–°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é, –∑–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
                    #)
                    #print("‚ö†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã - –∞–∫—Ç–∏–≤–Ω–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è")
                    #return
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∑–≤—É–∫–∞
            #if not self.source_combo.value:
                #self.show_message(
                    #"‚ö†Ô∏è –ù–µ –≤—ã–±—Ä–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–≤—É–∫–∞!\n\n"
                    #"–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–≤—É–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏."
                #)
                #print("‚ö†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã - –Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∑–≤—É–∫–∞")
                #return
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            #if not self.target_devices_
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        self.show_message(
            "‚ö†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n"
            "–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."
        )
        print("‚ö†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)")

    def toggle_language(self, _):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞."""
        self.language = 'en' if self.language == 'ru' else 'ru'
        self.settings["language"] = self.language
        self.settings_manager.save(self.settings)
        self.update_texts()

    def get_translation(self, text):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞."""
        translations = {
            "ru": {
                "–ò—Å—Ç–æ—á–Ω–∏–∫ –∑–≤—É–∫–∞": "–ò—Å—Ç–æ—á–Ω–∏–∫ –∑–≤—É–∫–∞",
                "–¶–µ–ª–µ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞": "–¶–µ–ª–µ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                "–î–µ–Ω—å": "–î–µ–Ω—å",
                "–ù–æ—á—å": "–ù–æ—á—å",
                "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å": "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å",
                "–ó–∞–ø—É—Å—Ç–∏—Ç—å": "–ó–∞–ø—É—Å—Ç–∏—Ç—å",
                "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å": "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                "–î–æ–±–∞–≤–∏—Ç—å": "–î–æ–±–∞–≤–∏—Ç—å",
                "–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫": "–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                "–ó–∞–¥–µ—Ä–∂–∫–∞ (–º—Å)": "–ó–∞–¥–µ—Ä–∂–∫–∞ (–º—Å)",
                "–ì—Ä–æ–º–∫–æ—Å—Ç—å (–¥–ë)": "–ì—Ä–æ–º–∫–æ—Å—Ç—å (–¥–ë)",
            },
            "en": {
                "–ò—Å—Ç–æ—á–Ω–∏–∫ –∑–≤—É–∫–∞": "Sound Source",
                "–¶–µ–ª–µ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞": "Target Devices",
                "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏": "Advanced Settings",
                "–î–µ–Ω—å": "Day",
                "–ù–æ—á—å": "Night",
                "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å": "Restart",
                "–ó–∞–ø—É—Å—Ç–∏—Ç—å": "Start",
                "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å": "Stop",
                "–î–æ–±–∞–≤–∏—Ç—å": "Add",
                "–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫": "Clear List",
                "–ó–∞–¥–µ—Ä–∂–∫–∞ (–º—Å)": "Delay (ms)",
                "–ì—Ä–æ–º–∫–æ—Å—Ç—å (–¥–ë)": "Volume (dB)",
            }
        }
        return translations[self.language].get(text, text)

    def update_texts(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ."""
        self.source_combo.label = self.get_translation("–ò—Å—Ç–æ—á–Ω–∏–∫ –∑–≤—É–∫–∞")
        self.target_combo.label = self.get_translation("–¶–µ–ª–µ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        self.advanced_settings_button.text = self.get_translation("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.theme_toggle_button.text = self.get_translation("–î–µ–Ω—å") if not self.is_dark_mode else self.get_translation("–ù–æ—á—å")
        
        self.restart_button.text = self.get_translation("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å")
        self.start_button.text = self.get_translation("–ó–∞–ø—É—Å—Ç–∏—Ç—å")
        self.stop_button.text = self.get_translation("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.add_button.text = self.get_translation("–î–æ–±–∞–≤–∏—Ç—å")
        self.clear_button.text = self.get_translation("–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫")
        self.language_toggle_button.text = "–†—É—Å" if self.language == 'ru' else "Eng"

        self.page.update()


def main(page: ft.Page):
    app = AudioForwarderApp(page)
    page.update()


if __name__ == "__main__":
    ft.app(target=main)
